<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Abp.Application</name>
    </assembly>
    <members>
        <member name="T:Abp.Application.Authorization.AbpAuthorizationException">
            <summary>
            This exception is thrown on an unauthorized request.
            </summary>
        </member>
        <member name="M:Abp.Application.Authorization.AbpAuthorizationException.#ctor">
            <summary>
            Contstructor.
            </summary>
        </member>
        <member name="M:Abp.Application.Authorization.AbpAuthorizationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Contstructor for serializing.
            </summary>
        </member>
        <member name="M:Abp.Application.Authorization.AbpAuthorizationException.#ctor(System.String)">
            <summary>
            Contstructor.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Abp.Application.Authorization.AbpAuthorizationException.#ctor(System.String,System.Exception)">
            <summary>
            Contstructor.
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:Abp.Application.Authorization.AuthorizationInterceptor">
            <summary>
            This class is used to intercept methods to make authorization if the method defined <see cref="T:Abp.Application.Authorization.AbpAuthorizeAttribute"/>.
            </summary>
        </member>
        <member name="T:Abp.Application.Authorization.IAbpAuthorizeAttribute">
            <summary>
            Defines standard interface for authorization attributes.
            </summary>
        </member>
        <member name="P:Abp.Application.Authorization.IAbpAuthorizeAttribute.Permissions">
            <summary>
            A list of permissions to authorize.
            </summary>
        </member>
        <member name="P:Abp.Application.Authorization.IAbpAuthorizeAttribute.RequireAllPermissions">
            <summary>
            If this property is set to true, all of the <see cref="P:Abp.Application.Authorization.IAbpAuthorizeAttribute.Permissions"/> must be granted.
            If it's false, at least one of the <see cref="P:Abp.Application.Authorization.IAbpAuthorizeAttribute.Permissions"/> must be granted.
            Default: false.
            </summary>
        </member>
        <member name="T:Abp.Application.Authorization.IAuthorizationService">
            <summary>
            Defines interface to use authorization system.
            </summary>
        </member>
        <member name="M:Abp.Application.Authorization.IAuthorizationService.HasAnyOfPermissions(System.String[])">
            <summary>
            Checks if current user is authorized for any of the given permissions.
            </summary>
            <param name="permissionNames">Name of the permissions</param>
            <returns>True: Yes, False: No.</returns>
        </member>
        <member name="M:Abp.Application.Authorization.IAuthorizationService.HasAllOfPermissions(System.String[])">
            <summary>
            Checks if current user is authorized for all of the given permissions.
            </summary>
            <param name="permissionNames">Name of the permissions</param>
            <returns>True: Yes, False: No.</returns>
        </member>
        <member name="T:Abp.Application.Authorization.NullAuthorizationService">
            <summary>
            This class is used as "null object" for <see cref="T:Abp.Application.Authorization.IAuthorizationService"/>.
            It returns true for permission checks.
            </summary>
        </member>
        <member name="M:Abp.Application.Authorization.NullAuthorizationService.#ctor">
            <summary>
            Private constructor to disable instancing.
            </summary>
        </member>
        <member name="P:Abp.Application.Authorization.NullAuthorizationService.Instance">
            <summary>
            Gets Singleton instance of <see cref="T:Abp.Application.Authorization.NullAuthorizationService"/>.
            </summary>
        </member>
        <member name="T:Abp.Application.Authorization.Permissions.IPermissionProvider">
            <summary>
            This interface defines a class that provide a list of permissions those are used for authorization in the application.
            </summary>
        </member>
        <member name="M:Abp.Application.Authorization.Permissions.IPermissionProvider.GetPermissions">
            <summary>
            Gets a list of <see cref="T:Abp.Application.Authorization.Permissions.Permission"/> objects.
            </summary>
            <returns>Permissions</returns>
        </member>
        <member name="T:Abp.Application.Authorization.Permissions.Permission">
            <summary>
            Represents a permission.
            A permission is used to restrict functionalities of the application from unauthorized users.
            </summary>
        </member>
        <member name="M:Abp.Application.Authorization.Permissions.Permission.#ctor(System.String,Abp.Localization.LocalizableString,System.Boolean,Abp.Localization.LocalizableString)">
            <summary>
            Creates a new Permission.
            </summary>
            <param name="name">Unique name of the permission</param>
            <param name="displayName">Display name of the permission</param>
            <param name="isGrantedByDefault">Is this permission granted by default</param>
            <param name="description">A brief description for this permission</param>
        </member>
        <member name="P:Abp.Application.Authorization.Permissions.Permission.Name">
            <summary>
            Unique name of the permission.
            </summary>
        </member>
        <member name="P:Abp.Application.Authorization.Permissions.Permission.DisplayName">
            <summary>
            Display name of the permission.
            This can be used to show permission to the user.
            </summary>
        </member>
        <member name="P:Abp.Application.Authorization.Permissions.Permission.Description">
            <summary>
            A brief description for this permission.
            </summary>
        </member>
        <member name="P:Abp.Application.Authorization.Permissions.Permission.IsGrantedByDefault">
            <summary>
            Is this permission granted by default.
            </summary>
        </member>
        <member name="T:Abp.Application.Authorization.Permissions.IPermissionManager">
            <summary>
            Permission manager.
            </summary>
        </member>
        <member name="M:Abp.Application.Authorization.Permissions.IPermissionManager.GetPermissionOrNull(System.String)">
            <summary>
            Gets <see cref="T:Abp.Application.Authorization.Permissions.Permission"/> object with given <see cref="!:permissionName"/> or returns null
            if there is no permission with given <see cref="!:permissionName"/>.
            </summary>
            <param name="permissionName">Unique name of the permission</param>
        </member>
        <member name="T:Abp.Application.Authorization.Permissions.PermissionManager">
            <summary>
            
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.EntityDto">
            <summary>
            A shortcut of <see cref="T:Abp.Application.Services.Dto.EntityDto`1"/> for most used primary key type (<see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.EntityDto`1">
            <summary>
            This base class can be used to simplify defining an entity based DTO.
            </summary>
            <typeparam name="TPrimaryKey">Type of the primary key</typeparam>
        </member>
        <member name="T:Abp.Application.Services.Dto.IDto">
            <summary>
            This interface must be implemented by all DTO classes to identify them by convention.
            </summary>
        </member>
        <member name="P:Abp.Application.Services.Dto.EntityDto`1.Id">
            <summary>
            Id of the entity.
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.IDoubleWayDto">
            <summary>
            This interface can be used to mark a DTO as both of <see cref="T:Abp.Application.Services.Dto.IInputDto"/> and <see cref="T:Abp.Application.Services.Dto.IOutputDto"/>.
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.IInputDto">
            <summary>
            This interface is used to define DTOs those are used as input parameters.
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.IOutputDto">
            <summary>
            This interface is used to define DTOs those are used as output parameters.
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.ILimitedResultRequest">
            <summary>
            This interface is defined to standardize to request a limited result.
            </summary>
        </member>
        <member name="P:Abp.Application.Services.Dto.ILimitedResultRequest.MaxResultCount">
            <summary>
            Max expected result count.
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.IPagedResultRequest">
            <summary>
            This interface is defined to standardize to request a paged result
            </summary>
        </member>
        <member name="P:Abp.Application.Services.Dto.IPagedResultRequest.SkipCount">
            <summary>
            Skip count (beggining of the page).
            </summary>
        </member>
        <member name="T:Abp.Application.Services.IApplicationService">
            <summary>
            This interface must be implemented by all application services to identify them by convention.
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.Validation.ValidationInterceptor">
            <summary>
            This interceptor is used intercept method calls for classes which's methods must be validated.
            </summary>
        </member>
        <member name="T:Abp.Startup.Application.ApplicationLayerInterceptorRegisterer">
            <summary>
            This class is used to register interceptors on the Application Layer.
            </summary>
        </member>
        <member name="T:Abp.Application.Authorization.AbpAuthorizeAttribute">
            <summary>
            This attribute is used on a method of an Application Service (A class that implements <see cref="T:Abp.Application.Services.IApplicationService"/>)
            to make that method usable only by authorized users.
            </summary>
        </member>
        <member name="M:Abp.Application.Authorization.AbpAuthorizeAttribute.#ctor(System.String[])">
            <summary>
            Creates a new instance of <see cref="T:Abp.Application.Authorization.AbpAuthorizeAttribute"/> class.
            </summary>
            <param name="permissions">A list of permissions to authorize</param>
        </member>
        <member name="P:Abp.Application.Authorization.AbpAuthorizeAttribute.Permissions">
            <summary>
            A list of permissions to authorize.
            </summary>
        </member>
        <member name="P:Abp.Application.Authorization.AbpAuthorizeAttribute.RequireAllPermissions">
            <summary>
            If this property is set to true, all of the <see cref="P:Abp.Application.Authorization.AbpAuthorizeAttribute.Permissions"/> must be granted.
            If it's false, at least one of the <see cref="P:Abp.Application.Authorization.AbpAuthorizeAttribute.Permissions"/> must be granted.
            Default: false.
            </summary>
        </member>
        <member name="T:Abp.Startup.Application.AbpApplicationModule">
            <summary>
            This module is used to simplify and standardize building the "Application Layer" of an application.
            </summary>
        </member>
        <member name="T:Abp.Application.Services.Dto.Validation.MethodInvocationValidator">
            <summary>
            This class is used to validate a method call (invocation) for method arguments.
            </summary>
        </member>
        <member name="M:Abp.Application.Services.Dto.Validation.MethodInvocationValidator.#ctor(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Creates a new <see cref="T:Abp.Application.Services.Dto.Validation.MethodInvocationValidator"/> instance.
            </summary>
            <param name="method">Method to be validated</param>
            <param name="arguments">List of arguments those are used to call the <see cref="!:method"/>.</param>
        </member>
        <member name="M:Abp.Application.Services.Dto.Validation.MethodInvocationValidator.Validate">
            <summary>
            Validates the method invocation.
            </summary>
        </member>
        <member name="M:Abp.Application.Services.Dto.Validation.MethodInvocationValidator.Validate(System.Reflection.ParameterInfo,System.Object)">
            <summary>
            Validates given parameter for given argument.
            </summary>
            <param name="parameter">Parameter of the method to validate</param>
            <param name="argument">Argument to validate</param>
        </member>
        <member name="M:Abp.Application.Services.Dto.Validation.MethodInvocationValidator.SetValidationAttributeErrors(System.Object)">
            <summary>
            Checks all properties for DataAnnotations attributes.
            </summary>
        </member>
    </members>
</doc>
